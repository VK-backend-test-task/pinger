/*
Backend for Docker containers ping info service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ContainerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerInfo{}

// ContainerInfo struct for ContainerInfo
type ContainerInfo struct {
	Ip string `json:"ip"`
	LastPing *time.Time `json:"last_ping,omitempty"`
	LastSuccess *time.Time `json:"last_success,omitempty"`
}

type _ContainerInfo ContainerInfo

// NewContainerInfo instantiates a new ContainerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerInfo(ip string) *ContainerInfo {
	this := ContainerInfo{}
	this.Ip = ip
	return &this
}

// NewContainerInfoWithDefaults instantiates a new ContainerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerInfoWithDefaults() *ContainerInfo {
	this := ContainerInfo{}
	return &this
}

// GetIp returns the Ip field value
func (o *ContainerInfo) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *ContainerInfo) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *ContainerInfo) SetIp(v string) {
	o.Ip = v
}

// GetLastPing returns the LastPing field value if set, zero value otherwise.
func (o *ContainerInfo) GetLastPing() time.Time {
	if o == nil || IsNil(o.LastPing) {
		var ret time.Time
		return ret
	}
	return *o.LastPing
}

// GetLastPingOk returns a tuple with the LastPing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerInfo) GetLastPingOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPing) {
		return nil, false
	}
	return o.LastPing, true
}

// HasLastPing returns a boolean if a field has been set.
func (o *ContainerInfo) HasLastPing() bool {
	if o != nil && !IsNil(o.LastPing) {
		return true
	}

	return false
}

// SetLastPing gets a reference to the given time.Time and assigns it to the LastPing field.
func (o *ContainerInfo) SetLastPing(v time.Time) {
	o.LastPing = &v
}

// GetLastSuccess returns the LastSuccess field value if set, zero value otherwise.
func (o *ContainerInfo) GetLastSuccess() time.Time {
	if o == nil || IsNil(o.LastSuccess) {
		var ret time.Time
		return ret
	}
	return *o.LastSuccess
}

// GetLastSuccessOk returns a tuple with the LastSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerInfo) GetLastSuccessOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastSuccess) {
		return nil, false
	}
	return o.LastSuccess, true
}

// HasLastSuccess returns a boolean if a field has been set.
func (o *ContainerInfo) HasLastSuccess() bool {
	if o != nil && !IsNil(o.LastSuccess) {
		return true
	}

	return false
}

// SetLastSuccess gets a reference to the given time.Time and assigns it to the LastSuccess field.
func (o *ContainerInfo) SetLastSuccess(v time.Time) {
	o.LastSuccess = &v
}

func (o ContainerInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ip"] = o.Ip
	if !IsNil(o.LastPing) {
		toSerialize["last_ping"] = o.LastPing
	}
	if !IsNil(o.LastSuccess) {
		toSerialize["last_success"] = o.LastSuccess
	}
	return toSerialize, nil
}

func (o *ContainerInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ip",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContainerInfo := _ContainerInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContainerInfo)

	if err != nil {
		return err
	}

	*o = ContainerInfo(varContainerInfo)

	return err
}

type NullableContainerInfo struct {
	value *ContainerInfo
	isSet bool
}

func (v NullableContainerInfo) Get() *ContainerInfo {
	return v.value
}

func (v *NullableContainerInfo) Set(val *ContainerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerInfo(val *ContainerInfo) *NullableContainerInfo {
	return &NullableContainerInfo{value: val, isSet: true}
}

func (v NullableContainerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


