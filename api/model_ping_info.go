/*
Backend for Docker containers ping info service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PingInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PingInfo{}

// PingInfo struct for PingInfo
type PingInfo struct {
	ContainerIp string `json:"container_ip"`
	Timestamp time.Time `json:"timestamp"`
	Success bool `json:"success"`
}

type _PingInfo PingInfo

// NewPingInfo instantiates a new PingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPingInfo(containerIp string, timestamp time.Time, success bool) *PingInfo {
	this := PingInfo{}
	this.ContainerIp = containerIp
	this.Timestamp = timestamp
	this.Success = success
	return &this
}

// NewPingInfoWithDefaults instantiates a new PingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPingInfoWithDefaults() *PingInfo {
	this := PingInfo{}
	return &this
}

// GetContainerIp returns the ContainerIp field value
func (o *PingInfo) GetContainerIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerIp
}

// GetContainerIpOk returns a tuple with the ContainerIp field value
// and a boolean to check if the value has been set.
func (o *PingInfo) GetContainerIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainerIp, true
}

// SetContainerIp sets field value
func (o *PingInfo) SetContainerIp(v string) {
	o.ContainerIp = v
}

// GetTimestamp returns the Timestamp field value
func (o *PingInfo) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *PingInfo) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *PingInfo) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetSuccess returns the Success field value
func (o *PingInfo) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *PingInfo) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *PingInfo) SetSuccess(v bool) {
	o.Success = v
}

func (o PingInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PingInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["container_ip"] = o.ContainerIp
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["success"] = o.Success
	return toSerialize, nil
}

func (o *PingInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"container_ip",
		"timestamp",
		"success",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPingInfo := _PingInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPingInfo)

	if err != nil {
		return err
	}

	*o = PingInfo(varPingInfo)

	return err
}

type NullablePingInfo struct {
	value *PingInfo
	isSet bool
}

func (v NullablePingInfo) Get() *PingInfo {
	return v.value
}

func (v *NullablePingInfo) Set(val *PingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePingInfo(val *PingInfo) *NullablePingInfo {
	return &NullablePingInfo{value: val, isSet: true}
}

func (v NullablePingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


