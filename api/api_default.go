/*
Backend for Docker containers ping info service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type ApiPingsAggregateGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	oldestFirst *bool
	limit *int32
	offset *int32
}

// Сортировать начиная со старых записей
func (r ApiPingsAggregateGetRequest) OldestFirst(oldestFirst bool) ApiPingsAggregateGetRequest {
	r.oldestFirst = &oldestFirst
	return r
}

// Максимальное количество выдаваемых результатов
func (r ApiPingsAggregateGetRequest) Limit(limit int32) ApiPingsAggregateGetRequest {
	r.limit = &limit
	return r
}

// Количество результатов, которое необходимо пропустить
func (r ApiPingsAggregateGetRequest) Offset(offset int32) ApiPingsAggregateGetRequest {
	r.offset = &offset
	return r
}

func (r ApiPingsAggregateGetRequest) Execute() ([]ContainerInfo, *http.Response, error) {
	return r.ApiService.PingsAggregateGetExecute(r)
}

/*
PingsAggregateGet Получить информацию о контейнерах и их последнем пинге

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPingsAggregateGetRequest
*/
func (a *DefaultAPIService) PingsAggregateGet(ctx context.Context) ApiPingsAggregateGetRequest {
	return ApiPingsAggregateGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ContainerInfo
func (a *DefaultAPIService) PingsAggregateGetExecute(r ApiPingsAggregateGetRequest) ([]ContainerInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ContainerInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PingsAggregateGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pings/aggregate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.oldestFirst != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "oldest_first", r.oldestFirst, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPingsGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	containerIp *string
	oldestFirst *bool
	success *bool
	limit *int32
	offset *int32
}

// IP контейнера, для которого выдавать список пингов
func (r ApiPingsGetRequest) ContainerIp(containerIp string) ApiPingsGetRequest {
	r.containerIp = &containerIp
	return r
}

// Сортировать начиная со старых записей
func (r ApiPingsGetRequest) OldestFirst(oldestFirst bool) ApiPingsGetRequest {
	r.oldestFirst = &oldestFirst
	return r
}

// Возвращать только успешные или неудавшиеся записи
func (r ApiPingsGetRequest) Success(success bool) ApiPingsGetRequest {
	r.success = &success
	return r
}

// Максимальное количество выдаваемых результатов
func (r ApiPingsGetRequest) Limit(limit int32) ApiPingsGetRequest {
	r.limit = &limit
	return r
}

// Количество результатов, которое необходимо пропустить
func (r ApiPingsGetRequest) Offset(offset int32) ApiPingsGetRequest {
	r.offset = &offset
	return r
}

func (r ApiPingsGetRequest) Execute() ([]PingInfo, *http.Response, error) {
	return r.ApiService.PingsGetExecute(r)
}

/*
PingsGet Получить информацию о пингах

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPingsGetRequest
*/
func (a *DefaultAPIService) PingsGet(ctx context.Context) ApiPingsGetRequest {
	return ApiPingsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PingInfo
func (a *DefaultAPIService) PingsGetExecute(r ApiPingsGetRequest) ([]PingInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PingInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PingsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.containerIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "container_ip", r.containerIp, "form", "")
	}
	if r.oldestFirst != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "oldest_first", r.oldestFirst, "form", "")
	}
	if r.success != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "success", r.success, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPingsPutRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	pingInfo *[]PingInfo
}

// Список результатов пинга
func (r ApiPingsPutRequest) PingInfo(pingInfo []PingInfo) ApiPingsPutRequest {
	r.pingInfo = &pingInfo
	return r
}

func (r ApiPingsPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.PingsPutExecute(r)
}

/*
PingsPut Загрузить информацию о пингах

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPingsPutRequest
*/
func (a *DefaultAPIService) PingsPut(ctx context.Context) ApiPingsPutRequest {
	return ApiPingsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) PingsPutExecute(r ApiPingsPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PingsPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pingInfo == nil {
		return nil, reportError("pingInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.pingInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
